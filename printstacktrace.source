#*******************************************************************************
# Copyright (c) 2020 Eclipse Foundation and others.
# This program and the accompanying materials are made available
# under the terms of the Eclipse Public License 2.0
# which is available at http://www.eclipse.org/legal/epl-v20.html,
# or the MIT License which is available at https://opensource.org/licenses/MIT.
# SPDX-License-Identifier: EPL-2.0 OR MIT
#*******************************************************************************

IFNDEF="$(echo "${BASH_SOURCE[0]}" | sha1sum | sed -E 's/^([^ ]*) .*$/import_\1/g')"
if [ -z "${!IFNDEF:-}" ]; then : "${!IFNDEF:=1}" && export "${IFNDEF?}"

# shellcheck disable=SC1090
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/import.source"
. "strict-mode.source"

function errexit() {
  local err=$?
  set +o xtrace
  local code="${1}"
  if [ "$1" != "0" ]; then
    echo "Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]} '${BASH_COMMAND}' exited with status $err"
    # Print out the stack trace described by $function_stack  
    if [ ${#FUNCNAME[@]} -gt 2 ]; then
      echo "Call tree:"
      for ((i=1;i<${#FUNCNAME[@]}-1;i++)); do
        echo " $i: ${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(...)"
      done
    fi
    echo "Exiting with status ${code}"
    exit "${code}"
  fi
}

# trap ERR to provide an error handler whenever a command exits nonzero
#  this is a more verbose version of set -o errexit
trap 'errexit $?' ERR
# setting errtrace allows our ERR trap handler to be propagated to functions,
#  expansions and subshells
set -o errtrace

fi #IFNDEF
